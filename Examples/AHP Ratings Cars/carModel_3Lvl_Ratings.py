
from AhpAnpLib import inputs_AHPLib as cdf_inp
from AhpAnpLib import structs_AHPLib as cdf_str
from AhpAnpLib import calcs_AHPLib as cdf_calc
from AhpAnpLib import ratings_AHPLib as cdf_rat

#create model
carModel=cdf_str.Model("Car Ratings")
#create nodes
goal_node=cdf_str.Node("GoalNode",0)


prestige=cdf_str.Node("1Prestige",1)
price=cdf_str.Node("2Price",2)
mpg=cdf_str.Node("3MPG",3)
comf=cdf_str.Node("4Comfort",4)

sub1=cdf_str.Node("2.1InitialCost",5)
sub2=cdf_str.Node("2.2Maintenance",6)


alt1=cdf_str.Node("1Acura TL",7)
alt2=cdf_str.Node("2Toyota Camry",8)
alt3=cdf_str.Node("3Honda Civic",9)


#create clusters
cluster0=cdf_str.Cluster("1Goal",0)
cluster1=cdf_str.Cluster("2Criteria",1)
cluster2=cdf_str.Cluster("PriceSubCriteria",2)
cluster3=cdf_str.Cluster("3Alternatives",3)

#add nodes to clusters
cluster0.addNode2Cluster(goal_node) 

cluster1.addNode2Cluster(prestige)
cluster1.addNode2Cluster(price)
cluster1.addNode2Cluster(mpg)
cluster1.addNode2Cluster(comf)

cluster2.addNode2Cluster(sub1)
cluster2.addNode2Cluster(sub2)

cluster3.addNode2Cluster(alt1)
cluster3.addNode2Cluster(alt2)
cluster3.addNode2Cluster(alt3)


#add clusters to model 
carModel.addCluster2Model(cluster0)
carModel.addCluster2Model(cluster1)
carModel.addCluster2Model(cluster2)
carModel.addCluster2Model(cluster3)

#set up node connections from Goal Node to all the nodes of the 2Criteria cluster
carModel.addNodeConnectionFromNodeToAllNodesOfCluster("GoalNode","2Criteria")

carModel.addNodeConnectionFromNodeToAllNodesOfCluster("2Price","PriceSubCriteria")


#set model type to ratings
carModel.setModelTypeRatings()

# Select bottom level criteria to use in the ratings model

#add by the variable name holding the node
    #carModel.rateModel.addCriteriaByVar(sub1,sub2,prestige,mpg,comf)

#or add by the criterion (node) name all at once or a few at a time

carModel.rateModel.addCriteriaByName("1Prestige","3MPG","4Comfort")
carModel.rateModel.addCriteriaByName("2.1InitialCost","2.2Maintenance")
# Create the alternatives to be used in the ratings model and add them or use existing nodes

#add by the variable name holding the node

# carModel.rateModel.addAlternativesByVar(alt1,alt2,alt3,alt4,alt5, alt6)
    
#or add by the criterion (node) name all at once, or a few at a time
carModel.rateModel.addAlternativesByName("1Acura TL","2Toyota Camry")
carModel.rateModel.addAlternativesByName("3Honda Civic","4Fiat","5MiniCooper","6Kia Rio")

#Read/Create rating scales to use for the evaluation of the alternatives with respect to the selected criteria
#this is how we add a scale that we already know its values
scale1a=cdf_rat.RatScale("PriceScale")
scale1a.defineScaleByValue(None,False,
["More than 30 K", 51],
["Between 25K and 30K",100], 
["Between 20K and 25K",39],
["Less than 20K",9]
)
#add scale to model
carModel.rateModel.addScaleByVar(scale1a)
# print(scale1a)

#this is how we add a scale when we want to calculate its values later on
scale1b=cdf_rat.RatScale("PriceScaleEmpty")
scale1b.defineScaleByValue(None,False,"More than 30 K","Between 25K and 30K", "Between 20K and 25K","Less than 20K")

carModel.rateModel.addScaleByVar(scale1b)
# print(scale1b)

#read scale from RCP file -- generated by Super Decisions (legacy software tool for AHP/ANPcd)
scale2_1=cdf_inp.readRatScaleRPCfile("Price_ScaleRCP","./RateScales/2_1.rcp")
carModel.rateModel.addScaleByVar(scale2_1)
# print(scale2_1)

scale2_2=cdf_inp.readRatScaleRPCfile("HighMediumLow_ScaleRCP","./RateScales/2_2.rcp")
carModel.rateModel.addScaleByVar(scale2_2)
# print(scale2_2)

scale1=cdf_inp.readRatScaleRPCfile("Excellent2Poor_ScaleRCP","./RateScales/1.rcp")
carModel.rateModel.addScaleByVar(scale1)
# print(scale1)

scale3=cdf_inp.readRatScaleRPCfile("GoodMediumPoor_ScaleRCP","./RateScales/3.rcp")

carModel.rateModel.addScaleByVar(scale3)
# print(scale3)

#assign scales to criteria that already belong to the ratings model
#when the same scale is assigned to two criteria then the scale gets duplicated so 1 scale corresponds to 1 criterion


carModel.rateModel.assignScale2CriterionByName("1Prestige","Excellent2Poor_ScaleRCP")
carModel.rateModel.assignScale2CriterionByName("2.1InitialCost","Price_ScaleRCP")
carModel.rateModel.assignScale2CriterionByName("2.2Maintenance","HighMediumLow_ScaleRCP")
carModel.rateModel.assignScale2CriterionByName("3MPG","GoodMediumPoor_ScaleRCP")
carModel.rateModel.assignScale2CriterionByName("4Comfort","Excellent2Poor_ScaleRCP")
# Print out model
# carModel.printStruct()
# carModel.drawGraphNodes()
# carModel.drawGraphClusters()
# carModel.drawGraphModel()

# Excel
cdf_inp.export4ExcelQuestFull(carModel,"carModel_Ratings_Criteria_empty.xlsx",True)

inputFilePath="carModel_Ratings_Criteria_FilledIn.xlsx"
inputFilePath2="carModel_Ratings_Table_empty.xlsx"
inputFilePath3="carModel_Ratings_Table_filledIn.xlsx"

outputFilePath="carModel_Ratings_Criteria_initialresults.xlsx"
outputFilePath2="carModel_Ratings_Results.xlsx"
cdf_inp.importFromExcel(carModel,inputFilePath,"pairwise_comp",False)
cdf_calc.calcAHPMatricesSave2File(carModel,inputFilePath,outputFilePath,True,False,True)

cdf_inp.export4ExcelRatingsSetup(carModel,inputFilePath2,True)
# cdf_calc.calcAHPMatricesSave2File(carModel,inputFilePath,outputFilePath2,True,False,True)
cdf_inp.calcExcelRatings(carModel,inputFilePath3,outputFilePath2,False)
